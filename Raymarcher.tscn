[gd_scene load_steps=3 format=2]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

uniform int MAX_STEPS = 250;
uniform float MAX_DIST = 20;
uniform float MIN_HIT_DIST = 0.00001;

uniform float fov = 45.0;
uniform vec3 cameraPos = vec3(0.0, 0.0, 5.0);
uniform vec3 front = vec3(0.0, 0.0, -1.0);
uniform vec3 up = vec3(0.0, 1.0, 0.0);

float sdSphere( vec3 p, vec3 c, float r )
{
    return length(c - p) - r;
}

float sdf(vec3 pos)
{
    return sdSphere(pos, vec3(0), 1);
}

vec3 raymarch(vec3 rayDir)
{
    vec3 hitColor = vec3(1.0, 1.0, 1.0);
    vec3 missColor = vec3(0.0, 0.0, 0.0);

    float depth = 0.0;
    float minDist = MAX_DIST;
    for (int i=0; depth<MAX_DIST && i<MAX_STEPS; ++i)
    {
        vec3 pos = cameraPos + rayDir * depth;
        float dist = sdf(pos);
        minDist = min(minDist, dist);
        if (dist < MIN_HIT_DIST) {
            return hitColor;
        }
        depth += dist;
    }
    return missColor;
}

vec3 getRayDirection(vec2 resolution, vec2 uv)
{
    float aspect = resolution.x / resolution.y;
    float fov2 = radians(fov) / 2.0;

    // convert coordinates from [0, 1] to [-1, 1]
    // and invert y axis to flow from bottom to top
    vec2 screenCoord = (uv - 0.5) * 2.0;
    screenCoord.x *= aspect;
    screenCoord.y = -screenCoord.y;

    // contibutions of the up and right vectors
    vec2 offsets = screenCoord * tan(fov2);
	
    // compute 3 orthogonal unit vectors
    vec3 rayFront = normalize(front);
    vec3 rayRight = normalize(cross(rayFront, normalize(up)));
    vec3 rayUp = cross(rayRight, rayFront);
    vec3 rayDir = rayFront + rayRight * offsets.x + rayUp * offsets.y;

    return normalize(rayDir);
}

void fragment()
{
    vec2 resolution = 1.0 / SCREEN_PIXEL_SIZE;
	
    vec3 rayDir = getRayDirection(resolution, UV);
    vec3 raymarchColor = raymarch(rayDir);
    COLOR = vec4(raymarchColor, 1.0);
}"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/MAX_STEPS = 250
shader_param/MAX_DIST = 20.0
shader_param/MIN_HIT_DIST = 1e-005
shader_param/fov = 45.0
shader_param/cameraPos = Vector3( 0, 0, 5 )
shader_param/front = Vector3( 0, 0, -1 )
shader_param/up = Vector3( 0, 1, 0 )

[node name="Node" type="Node"]

[node name="Control" type="Control" parent="."]
anchor_right = 1.0
anchor_bottom = 1.0

[node name="ColorRect" type="ColorRect" parent="Control"]
material = SubResource( 2 )
anchor_right = 1.0
anchor_bottom = 1.0
