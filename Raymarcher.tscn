[gd_scene load_steps=5 format=2]

[ext_resource path="res://CameraMovement.gd" type="Script" id=1]
[ext_resource path="res://Fov.gd" type="Script" id=2]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

uniform int MAX_STEPS = 250;
uniform float MAX_DIST = 20;
uniform float MIN_HIT_DIST = 0.00001;
uniform float DERIVATIVE_STEP = 0.0001;

uniform float globalAmbient = 0.1;
uniform float globalDiffuse = 1.0;
uniform float globalSpecular = 1.0;
uniform float globalSpecularExponent = 64.0;
uniform vec3 lightPos = vec3(-2.0, 5.0, 3.0);
uniform vec3 lightColor = vec3(0.9, 0.9, 0.68);
uniform vec3 ambientColor = vec3(1.0, 1.0, 1.0);

uniform float fov = 45.0;
uniform vec3 cameraPos = vec3(-3.0, 0.0, 0.0);
uniform vec3 front = vec3(1.0, 0.0, 0);
uniform vec3 up = vec3(0.0, 1.0, 0.0);

float sdSphere( vec3 p, vec3 c, float r )
{
    return length(c - p) - r;
}

float sdf(vec3 pos)
{
    return sdSphere(pos, vec3(0), 1);
}

vec3 estimateNormal(vec3 p) {
    return normalize(vec3(
        sdf(vec3(p.x + DERIVATIVE_STEP, p.y, p.z)) - sdf(vec3(p.x - DERIVATIVE_STEP, p.y, p.z)),
        sdf(vec3(p.x, p.y + DERIVATIVE_STEP, p.z)) - sdf(vec3(p.x, p.y - DERIVATIVE_STEP, p.z)),
        sdf(vec3(p.x, p.y, p.z  + DERIVATIVE_STEP)) - sdf(vec3(p.x, p.y, p.z - DERIVATIVE_STEP))
    ));
}

vec3 blinnPhong(vec3 position, // hit point
                vec3 lightPosition, // position of the light source
                vec3 ambientCol, // ambient color
                vec3 lightCol, // light source color
                float ambientCoeff, // scale ambient contribution
                float diffuseCoeff, // scale diffuse contribution
                float specularCoeff, // scale specular contribution
                float specularExponent // how focused should the shiny spot be
)
{
    vec3 normal = estimateNormal(position);
    vec3 toEye = normalize(cameraPos - position);
    vec3 toLight = normalize(lightPosition - position);
    vec3 reflection = reflect(-toLight, normal);
    
    vec3 ambientFactor = ambientCol * ambientCoeff;
    vec3 diffuseFactor = diffuseCoeff * lightCol * max(0.0, dot(normal, toLight));
    vec3 specularFactor = lightCol * pow(max(0.0, dot(toEye, reflection)), specularExponent)
                     * specularCoeff;
    
    return ambientFactor + diffuseFactor + specularFactor;
}

vec3 raymarch(vec3 rayDir)
{
    vec3 missColor = vec3(0.0, 0.0, 0.0);

    float depth = 0.0;
    for (int i=0; depth<MAX_DIST && i<MAX_STEPS; ++i)
    {
        vec3 pos = cameraPos + rayDir * depth;
        float dist = sdf(pos);
        if (dist < MIN_HIT_DIST) {
            return blinnPhong(pos, lightPos, ambientColor, lightColor,
                globalAmbient, globalDiffuse, globalSpecular, globalSpecularExponent);
        }
        depth += dist;
    }
    return missColor;
}

vec3 getRayDirection(vec2 resolution, vec2 uv)
{
    float aspect = resolution.x / resolution.y;
    float fov2 = radians(fov) / 2.0;

    // convert coordinates from [0, 1] to [-1, 1]
    // and invert y axis to flow from bottom to top
    vec2 screenCoord = (uv - 0.5) * 2.0;
    screenCoord.x *= aspect;
    screenCoord.y = -screenCoord.y;

    // contibutions of the up and right vectors
    vec2 offsets = screenCoord * tan(fov2);
	
    // compute 3 orthogonal unit vectors
    vec3 rayFront = normalize(front);
    vec3 rayRight = normalize(cross(rayFront, normalize(up)));
    vec3 rayUp = cross(rayRight, rayFront);
    vec3 rayDir = rayFront + rayRight * offsets.x + rayUp * offsets.y;

    return normalize(rayDir);
}

void fragment()
{
    vec2 resolution = 1.0 / SCREEN_PIXEL_SIZE;
	
    vec3 rayDir = getRayDirection(resolution, UV);
    vec3 raymarchColor = raymarch(rayDir);
    COLOR = vec4(raymarchColor, 1.0);
}"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/MAX_STEPS = 250
shader_param/MAX_DIST = 20.0
shader_param/MIN_HIT_DIST = 1e-005
shader_param/DERIVATIVE_STEP = 0.0001
shader_param/globalAmbient = 0.1
shader_param/globalDiffuse = 1.0
shader_param/globalSpecular = 1.0
shader_param/globalSpecularExponent = 64.0
shader_param/lightPos = Vector3( -2, 5, 3 )
shader_param/lightColor = Vector3( 0.9, 0.9, 0.68 )
shader_param/ambientColor = Vector3( 1, 1, 1 )
shader_param/fov = 45.0
shader_param/cameraPos = Vector3( -3, 0, 0 )
shader_param/front = Vector3( 1, 0, 0 )
shader_param/up = Vector3( 0, 1, 0 )

[node name="Node" type="Node"]

[node name="Control" type="Control" parent="."]
anchor_right = 1.0
anchor_bottom = 1.0

[node name="ColorRect" type="ColorRect" parent="Control"]
material = SubResource( 2 )
anchor_right = 1.0
anchor_bottom = 1.0

[node name="CameraMovement" type="Node" parent="Control/ColorRect"]
script = ExtResource( 1 )

[node name="Fov" type="Node" parent="Control/ColorRect"]
script = ExtResource( 2 )
